df
library(shiny)
library(readxl)
df <- read_excel("C:/Users/Win10/Documents/dashboard_r/dashboard/dashboard/dados_de_caminhada_corrida.xlsx")
df
View(df)
runApp('dashboard_r/dashboard/dashboard')
runApp('C:/Users/Win10/Downloads')
shiny::runApp('dashboard_r/dashboard/dashboard')
bins <- seq(min(x), max(x), length.out = input$bins + 1)
# generate bins based on input$bins from ui.R
x    <- faithful[, 2]
x
bins <- seq(min(x), max(x), length.out = input$bins + 1)
<- function(input, output) {
server <- function(input, output) {
output$distPlot <- renderPlot({
# generate bins based on input$bins from ui.R
x    <- faithful[, 2]
bins <- seq(min(x), max(x), length.out = input$bins + 1)
# draw the histogram with the specified number of bins
hist(x, breaks = bins, col = 'darkgray', border = 'white',
xlab = 'Waiting time to next eruption (in mins)',
main = 'Histogram of waiting times')
})
}
bins
bins <- seq(min(x), max(x), length.out = input$bins + 1)
runApp('dashboard_r/dashboard/dashboard')
runApp('dashboard_r/dashboard/dashboard')
runApp('dashboard_r/dashboard/dashboard')
runApp('dashboard_r/dashboard/dashboard')
library(shiny)
library(readxl)
library(dplyr)
df <- read_excel("C:/Users/Win10/Documents/dashboard_r/dashboard/dashboard/dados_de_caminhada_corrida.xlsx")
df
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
titlePanel("Intervalo de Confiança"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
sliderInput("bins",
"Nível de confiança:",
min = 0.01,
max = 0.1,
value = 0.03)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("distPlot")
)
)
)
# Define server logic required to draw a histogram
server <- function(input, output) {
output$distPlot <- renderText({"esse valor:", input$bins})
runApp('dashboard_r/dashboard/dashboard')
runApp('dashboard_r/dashboard/dashboard')
runApp('dashboard_r/dashboard/dashboard')
runApp('dashboard_r/dashboard/dashboard')
runApp('dashboard_r/dashboard/dashboard')
View(df)
View(df)
shiny)
library(shiny)
library(readxl)
library(dplyr)
df <- read_excel("C:/Users/Win10/Documents/dashboard_r/dashboard/dashboard/dados_de_caminhada_corrida.xlsx")
df %>% select(Hora, Velocidade)
library(shiny)
library(readxl)
library(dplyr)
df <- read_excel("C:/Users/Win10/Documents/dashboard_r/dashboard/dashboard/dados_de_caminhada_corrida.xlsx")
df %>% select(Hora, Velocidade)
df
library(shiny)
library(readxl)
library(dplyr)
df <- readxl::read_excel("C:/Users/Win10/Documents/dashboard_r/dashboard/dashboard/dados_de_caminhada_corrida.xlsx") %>%
group_by(hora, velocidade)
library(shiny)
library(readxl)
library(dplyr)
df <- readxl::read_excel("C:/Users/Win10/Documents/dashboard_r/dashboard/dashboard/dados_de_caminhada_corrida.xlsx") %>%
group_by(Hora, Velocidade)
df
library(shiny)
library(readxl)
library(dplyr)
df <- readxl::read_excel("C:/Users/Win10/Documents/dashboard_r/dashboard/dashboard/dados_de_caminhada_corrida.xlsx") %>%
filter(Hora >= '2023-03-23 18:45:18' && Hora <= '2023-03-23 18:49:23' )
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
titlePanel("Intervalo de Confiança"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
sliderInput("bins",
"Nível de confiança:",
min = 0.01,
max = 0.1,
value = 0.03)
),
# Show a plot of the generated distribution
mainPanel(
textOutput("distPlot")
)
)
)
# Define server logic required to draw a histogram
server <- function(input, output) {
output$distPlot <- renderText({paste("esse valor:", input$bins)})
}
# Run the application
shinyApp(ui = ui, server = server)
library(shiny)
library(readxl)
library(dplyr)
df <- readxl::read_excel("C:/Users/Win10/Documents/dashboard_r/dashboard/dashboard/dados_de_caminhada_corrida.xlsx") %>%
filter(Hora >= '2023-03-23 18:45:18' && Hora <= '2023-03-23 18:49:23' )
View(df)
library(shiny)
library(readxl)
library(dplyr)
df <- readxl::read_excel("C:/Users/Win10/Documents/dashboard_r/dashboard/dashboard/dados_de_caminhada_corrida.xlsx") %>%
filter(Hora >= '2023-03-23 18:45:18' & Hora <= '2023-03-23 18:49:23' )
library(shiny)
library(readxl)
library(dplyr)
df <- readxl::read_excel("C:/Users/Win10/Documents/dashboard_r/dashboard/dashboard/dados_de_caminhada_corrida.xlsx") %>%
filter(Hora >= '2023-03-23 18:45:18' & Hora <= '2023-03-23 18:49:23' )
library(shiny)
library(readxl)
library(dplyr)
df <- readxl::read_excel("C:/Users/Win10/Documents/dashboard_r/dashboard/dashboard/dados_de_caminhada_corrida.xlsx") %>%
filter_time('2023-03-23 18:45:18' ~ '2023-03-23 18:49:23')
library(shiny)
library(readxl)
library(dplyr)
library(tibbletime)
df <- readxl::read_excel("C:/Users/Win10/Documents/dashboard_r/dashboard/dashboard/dados_de_caminhada_corrida.xlsx") %>%
filter_time('2023-03-23 18:45:18' ~ '2023-03-23 18:49:23')
library(shiny)
library(readxl)
library(dplyr)
df <- readxl::read_excel("C:/Users/Win10/Documents/dashboard_r/dashboard/dashboard/dados_de_caminhada_corrida.xlsx") %>%
mutate(timestamp_utc = ymd_hms(time_str, tz = 'UTC'),
timestamp_est = with_tz(timestamp_utc, 'America/New_York'),
time_est = as.hms(timestamp_est, tz = 'America/New_York')) %>%
filter(time_est >= hms::as.hms('18:45:18', tz = 'America/New_York'),
time_est <= hms::as.hms('18:49:23', tz = 'America/New_York'))
library(shiny)
library(readxl)
library(dplyr)
df <- readxl::read_excel("C:/Users/Win10/Documents/dashboard_r/dashboard/dashboard/dados_de_caminhada_corrida.xlsx") %>%
mutate(Hora = as.numeric(format(time, "%H%M%S"))) %>%
filter(between(foo, 184518, 184923)) %>%
select(-foo)
df
library(shiny)
library(readxl)
library(dplyr)
df <- readxl::read_excel("C:/Users/Win10/Documents/dashboard_r/dashboard/dashboard/dados_de_caminhada_corrida.xlsx") %>%
filter(between('2023-03-23 18:45:18','2023-03-23 18:49:23'))
library(shiny)
library(readxl)
library(dplyr)
df <- readxl::read_excel("C:/Users/Win10/Documents/dashboard_r/dashboard/dashboard/dados_de_caminhada_corrida.xlsx") %>%
filter(between(Hora,'2023-03-23 18:45:18','2023-03-23 18:49:23'))
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
titlePanel("Intervalo de Confiança"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
sliderInput("bins",
"Nível de confiança:",
min = 0.01,
max = 0.1,
value = 0.03)
),
# Show a plot of the generated distribution
mainPanel(
textOutput("distPlot")
)
)
)
# Define server logic required to draw a histogram
server <- function(input, output) {
output$distPlot <- renderText({paste("esse valor:", input$bins)})
}
# Run the application
shinyApp(ui = ui, server = server)
library(shiny)
library(readxl)
library(dplyr)
df <- readxl::read_excel("C:/Users/Win10/Documents/dashboard_r/dashboard/dashboard/dados_de_caminhada_corrida.xlsx") %>%
filter(between(Hora,'2023-03-23 18:45:18','2023-03-23 18:49:23'))
library(shiny)
library(readxl)
library(dplyr)
df <- readxl::read_excel("C:/Users/Win10/Documents/dashboard_r/dashboard/dashboard/dados_de_caminhada_corrida.xlsx") %>%
filter(between(Hora,'2023-03-23 18:45:18','2023-03-23 18:49:23'))
# Define UI for application that draws a histogram
View(df)
library(shiny)
library(readxl)
library(dplyr)
df <- readxl::read_excel("C:/Users/Win10/Documents/dashboard_r/dashboard/dashboard/dados_de_caminhada_corrida.xlsx") %>%
mutate(time2 = format(Hora, format="%H:%M:%S")) %>%
filter(time2 >= "18:45:18" & time2 < "18:49:23") %>%
select(-time2)
View(df)
library(shiny)
library(readxl)
library(dplyr)
df <- readxl::read_excel("C:/Users/Win10/Documents/dashboard_r/dashboard/dashboard/dados_de_caminhada_corrida.xlsx") %>%
mutate(time = format(Hora, format="%H:%M:%S")) %>%
filter(time >= "18:45:18" & time2 < "18:49:23") %>%
select(-time2)
library(shiny)
library(readxl)
library(dplyr)
df <- readxl::read_excel("C:/Users/Win10/Documents/dashboard_r/dashboard/dashboard/dados_de_caminhada_corrida.xlsx") %>%
mutate(time = format(Hora, format="%H:%M:%S")) %>%
filter(time >= "18:45:18" & time < "18:49:23") %>%
select(-time)
library(shiny)
library(readxl)
library(dplyr)
df <- readxl::read_excel("C:/Users/Win10/Documents/dashboard_r/dashboard/dashboard/dados_de_caminhada_corrida.xlsx") %>%
mutate(time = format(Hora, format="%H:%M:%S")) %>%
filter(time >= "18:45:18" & time < "18:49:23") %>%
select(time)
library(shiny)
library(readxl)
library(dplyr)
df <- readxl::read_excel("C:/Users/Win10/Documents/dashboard_r/dashboard/dashboard/dados_de_caminhada_corrida.xlsx") %>%
mutate(time = format(Hora, format="%H:%M:%S")) %>%
filter(time >= "18:45:18" & time < "18:49:23")
library(shiny)
library(readxl)
library(dplyr)
df <- readxl::read_excel("C:/Users/Win10/Documents/dashboard_r/dashboard/dashboard/dados_de_caminhada_corrida.xlsx") %>%
mutate(time = format(Hora, format="%H:%M:%S")) %>%
filter(time >= "18:45:18" & time < "18:49:23") %>%
select(-time)
df[,2]
library(shiny)
library(readxl)
library(dplyr)
df <- readxl::read_excel("C:/Users/Win10/Documents/dashboard_r/dashboard/dashboard/dados_de_caminhada_corrida.xlsx") %>%
mutate(time = format(Hora, format="%H:%M:%S")) %>%
filter(time >= "18:45:18" & time < "18:49:23") %>%
select(-time)
x <- df[,2]
x
View(x)
View(x)
library(stringr)
library(shiny)
library(readxl)
library(dplyr)
library(stringr)
df <- readxl::read_excel("C:/Users/Win10/Documents/dashboard_r/dashboard/dashboard/dados_de_caminhada_corrida.xlsx") %>%
mutate(time = format(Hora, format="%H:%M:%S")) %>%
filter(time >= "18:45:18" & time < "18:49:23") %>%
select(-time) %>% mutate(Velocidade = str_remove(Velocidade,'km/h'))
library(shiny)
library(readxl)
library(dplyr)
library(stringr)
path <- file.path("C:", "Users", "Win10", "Documents","dashboard_r","dashboard","dashboard", fsep="/")
df <- readxl::read_excel(path,"dados_de_caminhada_corrida.xlsx") %>%
mutate(time = format(Hora, format="%H:%M:%S")) %>%
filter(time >= "18:45:18" & time < "18:49:23") %>%
select(-time) %>% mutate(Velocidade = str_remove(Velocidade,'km/h'))
library(shiny)
library(readxl)
library(dplyr)
library(stringr)
path <- file.path("C:", "Users", "Win10", "Documents","dashboard_r","dashboard","dashboard", fsep="//")
df <- readxl::read_excel(path,"dados_de_caminhada_corrida.xlsx") %>%
mutate(time = format(Hora, format="%H:%M:%S")) %>%
filter(time >= "18:45:18" & time < "18:49:23") %>%
select(-time) %>% mutate(Velocidade = str_remove(Velocidade,'km/h'))
library(shiny)
library(readxl)
library(dplyr)
library(stringr)
path <- file.path("C:", "Users", "Win10", "Documents","dashboard_r","dashboard","dashboard", fsep="\\")
df <- readxl::read_excel(path,"dados_de_caminhada_corrida.xlsx") %>%
mutate(time = format(Hora, format="%H:%M:%S")) %>%
filter(time >= "18:45:18" & time < "18:49:23") %>%
select(-time) %>% mutate(Velocidade = str_remove(Velocidade,'km/h'))
library(shiny)
library(readxl)
library(dplyr)
library(stringr)
df <- readxl::read_excel("C:/Users/Win10/Documents/dashboard_r/dashboard/dashboard/dados_de_caminhada_corrida.xlsx") %>%
mutate(time = format(Hora, format="%H:%M:%S")) %>%
filter(time >= "18:45:18" & time < "18:49:23") %>%
select(-time) %>% mutate(Velocidade = str_remove(Velocidade,'km/h'))
library(shiny)
library(readxl)
library(dplyr)
library(stringr)
df <- readxl::read_excel("C:/Users/Win10/Documents/dashboard_r/dashboard/dashboard/dados_de_caminhada_corrida.xlsx") %>%
mutate(time = format(Hora, format="%H:%M:%S")) %>%
filter(time >= "18:45:18" & time < "18:49:23") %>%
select(-time) %>% mutate(Velocidade = as.numeric(str_remove(Velocidade,'km/h')))
library(shiny)
library(readxl)
library(dplyr)
library(stringr)
df <- readxl::read_excel("C:/Users/Win10/Documents/dashboard_r/dashboard/dashboard/dados_de_caminhada_corrida.xlsx") %>%
mutate(time = format(Hora, format="%H:%M:%S")) %>%
filter(time >= "18:45:18" & time < "18:49:23") %>%
select(-time) %>% mutate(Velocidade = as.numeric(str_remove(Velocidade,'km/h')))
View(df)
df
runApp('dashboard_r/dashboard/dashboard')
runApp('dashboard_r/dashboard/dashboard')
x = df[,1]
x
x = c(df[,2])
x
library(shiny)
library(readxl)
library(dplyr)
library(stringr)
df <- readxl::read_excel("C:/Users/Win10/Documents/dashboard_r/dashboard/dashboard/dados_de_caminhada_corrida.xlsx") %>%
mutate(time = format(Hora, format="%H:%M:%S")) %>%
filter(time >= "18:45:18" & time < "18:49:23") %>%
select(-time) %>% mutate(Velocidade = as.numeric(str_remove(Velocidade,'km/h')))
x = c(df[,2])
# filter(between(Hora,'2023-03-23 18:45:18','2023-03-23 18:49:23'))
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
titlePanel("Intervalo de Confiança"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
sliderInput("alfa",
"Nível de confiança:",
min = 0.01,
max = 0.1,
value = 0.03)
),
# Show a plot of the generated distribution
mainPanel(
textOutput("IC")
)
)
)
# Define server logic required to draw a histogram
server <- function(input, output) {
output$IC <- renderText({ z = qnorm(input$alfa/2 + 1 - input$alfa)
ICmin = round(mean(x) - z*sd(x)/sqrt(n), 2)
ICmax = round(mean(x) + z*sd(x)/sqrt(n), 2)
paste0("IC(mu) = ", "[", ICmin, "; ", ICmax, "]")})
}
# Run the application
shinyApp(ui = ui, server = server)
library(shiny)
library(readxl)
library(dplyr)
library(stringr)
df <- readxl::read_excel("C:/Users/Win10/Documents/dashboard_r/dashboard/dashboard/dados_de_caminhada_corrida.xlsx") %>%
mutate(time = format(Hora, format="%H:%M:%S")) %>%
filter(time >= "18:45:18" & time < "18:49:23") %>%
select(-time) %>% mutate(Velocidade = as.numeric(str_remove(Velocidade,'km/h')))
x = c(df[,2])
x
df[,2
]
library(shiny)
library(readxl)
library(dplyr)
library(stringr)
df <- readxl::read_excel("C:/Users/Win10/Documents/dashboard_r/dashboard/dashboard/dados_de_caminhada_corrida.xlsx") %>%
mutate(time = format(Hora, format="%H:%M:%S")) %>%
filter(time >= "18:45:18" & time < "18:49:23") %>%
select(-time) %>% mutate(Velocidade = as.numeric(str_remove(Velocidade,'km/h')))
x = df[,2]
x
library(shiny)
library(readxl)
library(dplyr)
library(stringr)
df <- readxl::read_excel("C:/Users/Win10/Documents/dashboard_r/dashboard/dashboard/dados_de_caminhada_corrida.xlsx") %>%
mutate(time = format(Hora, format="%H:%M:%S")) %>%
filter(time >= "18:45:18" & time < "18:49:23") %>%
select(-time) %>% mutate(Velocidade = as.numeric(str_remove(Velocidade,'km/h')))
x = df$Velocidade
x
library(shiny)
library(readxl)
library(dplyr)
library(stringr)
df <- readxl::read_excel("C:/Users/Win10/Documents/dashboard_r/dashboard/dashboard/dados_de_caminhada_corrida.xlsx") %>%
mutate(time = format(Hora, format="%H:%M:%S")) %>%
filter(time >= "18:45:18" & time < "18:49:23") %>%
select(-time) %>% mutate(Velocidade = as.numeric(str_remove(Velocidade,'km/h')))
x = df$Velocidade
# filter(between(Hora,'2023-03-23 18:45:18','2023-03-23 18:49:23'))
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
titlePanel("Intervalo de Confiança"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
sliderInput("alfa",
"Nível de confiança:",
min = 0.01,
max = 0.1,
value = 0.03)
),
# Show a plot of the generated distribution
mainPanel(
textOutput("IC")
)
)
)
# Define server logic required to draw a histogram
server <- function(input, output) {
output$IC <- renderText({ z = qnorm(input$alfa/2 + 1 - input$alfa)
ICmin = round(mean(x) - z*sd(x)/sqrt(n), 2)
ICmax = round(mean(x) + z*sd(x)/sqrt(n), 2)
paste0("IC(mu) = ", "[", ICmin, "; ", ICmax, "]")})
}
# Run the application
shinyApp(ui = ui, server = server)
x
class(x)
library(shiny)
library(readxl)
library(dplyr)
library(stringr)
df <- readxl::read_excel("C:/Users/Win10/Documents/dashboard_r/dashboard/dashboard/dados_de_caminhada_corrida.xlsx") %>%
mutate(time = format(Hora, format="%H:%M:%S")) %>%
filter(time >= "18:45:18" & time < "18:49:23") %>%
select(-time) %>% mutate(Velocidade = as.numeric(str_remove(Velocidade,'km/h')))
x = df$Velocidade
n = length(x)
# filter(between(Hora,'2023-03-23 18:45:18','2023-03-23 18:49:23'))
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
titlePanel("Intervalo de Confiança"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
sliderInput("alfa",
"Nível de confiança:",
min = 0.01,
max = 0.1,
value = 0.03)
),
# Show a plot of the generated distribution
mainPanel(
textOutput("IC")
)
)
)
# Define server logic required to draw a histogram
server <- function(input, output) {
output$IC <- renderText({ z = qnorm(input$alfa/2 + 1 - input$alfa)
ICmin = round(mean(x) - z*sd(x)/sqrt(n), 2)
ICmax = round(mean(x) + z*sd(x)/sqrt(n), 2)
paste0("IC(mu) = ", "[", ICmin, "; ", ICmax, "]")})
}
# Run the application
shinyApp(ui = ui, server = server)
runApp('dashboard_r/dashboard/dashboard')
runApp('dashboard_r/dashboard/dashboard')
runApp('dashboard_r/dashboard/dashboard')
shiny::runApp('dashboard_r/dashboard/dashboard')
####### Teste bilateral
mu0 = 11
library(shiny)
library(readxl)
library(dplyr)
library(stringr)
df <- readxl::read_excel("C:/Users/Win10/Documents/dashboard_r/dashboard/dashboard/dados_de_caminhada_corrida.xlsx") %>%
mutate(time = format(Hora, format="%H:%M:%S")) %>%
filter(time >= "18:45:18" & time < "18:49:23") %>%
select(-time) %>% mutate(Velocidade = as.numeric(str_remove(Velocidade,'km/h')))
x = df$Velocidade
n = length(x)
df_teste <- readxl::read_excel("C:/Users/Win10/Documents/dashboard_r/dashboard/dashboard/dados_de_caminhada_corrida.xlsx") %>%
mutate(time = format(Hora, format="%H:%M:%S")) %>%
filter(time >= "18:40:53" & time < "18:45:12") %>%
select(-time) %>% mutate(Velocidade = as.numeric(str_remove(Velocidade,'km/h')))
View(df_teste)
runApp('dashboard_r/dashboard/dashboard')
runApp('dashboard_r/dashboard/dashboard')
runApp('dashboard_r/dashboard/dashboard')
runApp('dashboard_r/dashboard/dashboard')
runApp('dashboard_r/dashboard/dashboard')
runApp('dashboard_r/dashboard/dashboard')
runApp('dashboard_r/dashboard/dashboard')
runApp('dashboard_r/dashboard/dashboard')
runApp('dashboard_r/dashboard/dashboard')
runApp('dashboard_r/dashboard/dashboard')
